Нужно разработать модуль хранения файлов сотрудников.
Каждый сотрудник должен иметь возможность загружать файл и задавать его настройки видимости - только для себя, для всех в подразделении или для всех в компании.
Сотрудник может удалять свои файлы.
У файла есть название, описание и сам файл.
Так же должна быть "корневая" директория, в которую могут добавлять файлы только с правами "Публикация файлов в корень" (нужно добавить права).
Корневая папка доступна всем.
Нужны API:
1. Получить список файлов в "корневой папке"
2. Получить список файлов в своём подразделении
3. Получить названия папок и внутри файлы всех других подразделений, где пользователи указали что доступны всем.





### API: Файлы сотрудников

- Базовый префикс: `/api/files/employee-file/`
- Аутентификация: заголовок `Authorization: Token <knox_token>`
- Формат загрузки: `multipart/form-data` (для `file`)
- Видимость (`visibility`): `self | department | company | root`
- `root` — разрешено только при праве `files.publish_to_root`



### Модель файла
- Поля:
- `id` (int)
- `name` (str) — название
- `description` (str, optional) — описание
- `file` (url) — ссылка на файл
- `visibility` (enum) — `self|department|company|root`
- `owner` (str) — ФИО/логин владельца (read-only)
- `department` (str) — название подразделения владельца (read-only)
- `created_at`, `updated_at` (datetime)



### Эндпоинты

1) Список видимых файлов
- GET `/api/files/employee-file/`
- Что возвращает: файлы, видимые текущему пользователю:
- его собственные (`self`)
- его подразделения (`department`)
- общекорпоративные (`company`)
- «корневые» (`root`)
- Пагинация: cursor (по умолчанию, page size 100)
- Пример ответа (усечённо):
```json
{
"next": "http://.../cursor=xxx",
"previous": null,
"results": [
{
"id": 12,
"name": "Инструкция",
"description": "PDF",
"file": "https://.../media/files/employees/2025/08/file.pdf",
"visibility": "company",
"owner": "Иванов И.И.",
"department": "Хирургическое отделение",
"created_at": "2025-08-09T11:22:33Z",
"updated_at": "2025-08-09T11:22:33Z"
}
]
}
```

2) Загрузка файла
- POST `/api/files/employee-file/`
- Тело (multipart/form-data):
- `name`: str
- `description`: str (optional)
- `file`: file
- `visibility`: enum (`self|department|company|root`)
- Требования:
- `root` — только при праве `files.publish_to_root` (иначе 400)
- `owner` и `department` проставляются автоматически по текущему пользователю
- Пример:
```bash
curl -X POST https://.../api/files/employee-file/ \
-H "Authorization: Token XXX" \
-F "name=Памятка" \
-F "description=Актуальная" \
-F "visibility=department" \
-F "file=@memo.pdf"
```
- Ответ 201 (тело — созданный объект)

3) Детали файла
- GET `/api/files/employee-file/{id}/`
- Доступ: только если файл видим пользователю (иначе 404)
- Ответ: объект файла (как в списке)

4) Удаление файла
- DELETE `/api/files/employee-file/{id}/`
- Доступ: только владелец (иначе 403)
- Ответ: 204 без тела

5) Список «корневая папка»
- GET `/api/files/employee-file/root/`
- Что возвращает: все файлы с `visibility=root`
- Пагинация: нет (выдаёт весь список)
- Пример ответа:
```json
[
{
"id": 1,
"name": "Объявление",
"description": "",
"file": "https://.../media/files/employees/2025/08/announce.pdf",
"visibility": "root",
"owner": "Администратор системы",
"department": "",
"created_at": "2025-08-09T10:00:00Z",
"updated_at": "2025-08-09T10:00:00Z"
}
]
```

6) Список файлов подразделения пользователя
- GET `/api/files/employee-file/department/`
- Что возвращает: файлы с `visibility=department` текущего подразделения
- Пагинация: нет

7) Список файлов других подразделений (только «доступно всем»)
- GET `/api/files/employee-file/others/?with_empty=1`
- Параметры:
- `with_empty` (bool, optional): включать подразделения без файлов
- Что возвращает: список подразделений ≠ пользовательского, с файлами `visibility=company`
- Формат:
```json
[
{
"department": "Приёмное отделение",
"files": [ { ... }, { ... } ]
},
{
"department": "Диагностическое отделение",
"files": []
}
]
```

### Статусы ошибок (основные)
- 400: неверные данные (например, `visibility=root` без права публикации)
- 401: неавторизован
- 403: попытка удалить чужой файл
- 404: файл не найден или недоступен по правилам видимости

### Заголовки/авторизация
- `Authorization: Token <knox_token>`

### Заметки по пагинации
- `GET /api/files/employee-file/` — курсорная пагинация (`cursor` в ссылках next/previous)
- `root/department/others` — без пагинации (возвращают весь набор)

Если нужно — добавлю примеры JSON для всех комбинаций `visibility` и Swagger-описания с примерами (OpenApiExample) для каждого метода.

- Описал все эндпоинты: список/детали/создание/удаление + root/department/others.
- Указал аутентификацию, структуру полей, статусы ошибок и особенности пагинации.
