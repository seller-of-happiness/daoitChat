/*
 * API —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
 * 
 * –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ HTTP –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏:
 * - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∏–ø–æ–≤ —Ä–µ–∞–∫—Ü–∏–π
 * - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º
 * - –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π —Å —Å–æ–æ–±—â–µ–Ω–∏–π
 * - –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–æ–±—â–µ–Ω–∏—è
 */

import axios, { AxiosInstance } from 'axios'
import { BASE_URL } from '@/refactoring/environment/environment'
import type { IReactionType } from '@/refactoring/modules/chat/types/IChat'
import type {
    ReactionTypesApiResponse,
    AddReactionPayload,
    ChatApiResult,
} from '@/refactoring/modules/chat/types/api'

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Ä–µ–∞–∫—Ü–∏–π
 */
export class ReactionApiService {
    private axiosInstance: AxiosInstance

    constructor(axiosInstance: AxiosInstance = axios) {
        this.axiosInstance = axiosInstance
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–∏–ø—ã —Ä–µ–∞–∫—Ü–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async fetchReactionTypes(): Promise<ChatApiResult<IReactionType[]>> {
        try {
            const response = await this.axiosInstance.get<ReactionTypesApiResponse>(
                `${BASE_URL}/api/chat/chat/reactions/types/`
            )
            
            const reactionTypes = response.data

            if (Array.isArray(reactionTypes)) {
                return {
                    success: true,
                    data: reactionTypes,
                }
            } else {
                // Fallback —Ç–∏–ø—ã —Ä–µ–∞–∫—Ü–∏–π
                const fallbackTypes: IReactionType[] = [
                    { id: 1, name: 'Like', icon: 'üëç' },
                    { id: 2, name: 'Love', icon: '‚ù§Ô∏è' },
                    { id: 3, name: 'Laugh', icon: 'üòÇ' },
                    { id: 4, name: 'Wow', icon: 'üòÆ' },
                    { id: 5, name: 'Sad', icon: 'üò¢' },
                    { id: 6, name: 'Angry', icon: 'üò†' },
                ]

                return {
                    success: true,
                    data: fallbackTypes,
                }
            }
        } catch (error) {
            // –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ç–∏–ø—ã
            const fallbackTypes: IReactionType[] = [
                { id: 1, name: 'Like', icon: 'üëç' },
                { id: 2, name: 'Love', icon: '‚ù§Ô∏è' },
                { id: 3, name: 'Laugh', icon: 'üòÇ' },
                { id: 4, name: 'Wow', icon: 'üòÆ' },
                { id: 5, name: 'Sad', icon: 'üò¢' },
                { id: 6, name: 'Angry', icon: 'üò†' },
            ]

            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∏–ø—ã —Ä–µ–∞–∫—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ',
                data: fallbackTypes,
            }
        }
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    async addReaction(chatId: number, messageId: number, payload: AddReactionPayload): Promise<ChatApiResult<void>> {
        try {
            await this.axiosInstance.post(
                `${BASE_URL}/api/chat/chat/${chatId}/message/${messageId}/reactions/`,
                payload
            )

            return {
                success: true,
            }
        } catch (error) {
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é',
            }
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç —Ä–µ–∞–∫—Ü–∏—é —Å —Å–æ–æ–±—â–µ–Ω–∏—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç —Ä–µ–∞–∫—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
     */
    async removeReaction(chatId: number, messageId: number): Promise<ChatApiResult<void>> {
        try {
            // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º - API –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç —Ä–µ–∞–∫—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.axiosInstance.delete(
                `${BASE_URL}/api/chat/chat/${chatId}/message/${messageId}/reactions/`
            )

            return {
                success: true,
            }
        } catch (error) {
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é',
            }
        }
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ä–µ–∞–∫—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    async clearMyReactions(chatId: number, messageId: number): Promise<ChatApiResult<void>> {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ DELETE —ç–Ω–¥–ø–æ–∏–Ω—Ç –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            await this.axiosInstance.delete(
                `${BASE_URL}/api/chat/chat/${chatId}/message/${messageId}/reactions/`
            )

            return {
                success: true,
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ (–≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ–∞–∫—Ü–∏–∏ —É–∂–µ –Ω–µ—Ç)
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ (–≤–æ–∑–º–æ–∂–Ω–æ –∏—Ö —É–∂–µ –Ω–µ—Ç)',
            }
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é (—É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—É—é –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é)
     */
    async setExclusiveReaction(chatId: number, messageId: number, reactionTypeId: number): Promise<ChatApiResult<void>> {
        try {
            // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –º–æ–∏ —Ä–µ–∞–∫—Ü–∏–∏
            await this.clearMyReactions(chatId, messageId)
            
            // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
            const addResult = await this.addReaction(chatId, messageId, { 
                reaction_type_id: reactionTypeId 
            })

            if (!addResult.success) {
                return {
                    success: false,
                    error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é',
                }
            }

            return {
                success: true,
            }
        } catch (error) {
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é',
            }
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const reactionApiService = new ReactionApiService()