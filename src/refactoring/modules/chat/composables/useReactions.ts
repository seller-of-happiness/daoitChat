/**
 * –ö–æ–º–ø–æ–∑–∞–±–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
 * –í—ã–Ω–æ—Å–∏—Ç —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É —Ä–µ–∞–∫—Ü–∏–π –∏–∑ MessageItem
 */
import { computed, ref, watch } from 'vue'
import type {
    IMessage,
    IReactionType,
    IUser,
    ReactionUser,
    ReactionGroup,
    OptimisticReaction,
} from '@/refactoring/modules/chat/types/IChat'

type ReactionLike = {
    id?: string | number
    user?: { id?: string | number; user?: string | number; user_id?: string | number }
    user_id?: string | number
}

const pickUserId = (r: ReactionLike): string | undefined => {
    const v = r?.user?.id ?? r?.user?.user ?? r?.user?.user_id ?? r?.id ?? r?.user_id
    return v == null ? undefined : String(v)
}

export function useReactions(
    message: IMessage,
    currentUserId: string | null,
    reactionTypes: IReactionType[],
    chatMembers?: Array<{ user: string | IUser; user_name?: string; user_uuid?: string; is_admin?: boolean; joined_at?: string }>,
) {
    const optimisticReactions = ref<OptimisticReaction[]>([])
    const hasQuickLike = ref(false)
    const forceShowLike = ref(false)
    const isOptimisticallyCleared = ref(false)

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    const groupedReactions = computed<ReactionGroup[]>(() => {
        const raw = message?.reactions ?? message?.message_reactions ?? []
        const groups = new Map<string, ReactionGroup>()

        // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É —Ä–µ–∞–∫—Ü–∏–π
        const addUserToGroup = (
            id: string,
            name: string,
            icon: string | null,
            user: Record<string, any>,
        ) => {
            const key = String(id || name || icon || 'unknown')
            const emoji = getReactionEmoji({ id: 0, name, icon } as IReactionType)

            const userName = String(user?.user_name ?? user?.full_name ?? user?.name ?? '').trim()
            const userEntry: ReactionUser = {
                id: String(user?.user ?? user?.id ?? user?.user_id ?? Math.random()),
                name: userName || `User ${String(user?.user ?? user?.id ?? user?.user_id ?? 'Unknown')}`,
                avatar: user?.avatar || user?.icon || user?.photo || null,
            }

            const existing = groups.get(key)
            if (existing) {
                const already = existing.users.some((u) => String(u.id) === String(userEntry.id))
                if (!already) existing.users.push(userEntry)
            } else {
                groups.set(key, {
                    key,
                    emoji,
                    users: [userEntry],
                    tooltip: `${emoji} ¬∑ ${userEntry.name}`,
                })
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        if (Array.isArray(raw)) {
            processArrayFormat(raw, addUserToGroup, chatMembers, reactionTypes)
        } else if (raw && typeof raw === 'object') {
            processObjectFormat(raw, addUserToGroup, chatMembers, reactionTypes)
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
        for (const o of optimisticReactions.value) {
            addUserToGroup(String(o.id), o.name, o.icon, o.user)
        }

        const result = Array.from(groups.values())
        

        // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (currentUserId) {
            enforceExclusiveReactions(result, currentUserId)
        }

        // –ü–æ–º–µ—á–∞–µ–º –ª–∞–π–∫–∏ –¥–ª—è –æ—Å–æ–±–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        result.forEach((g: any) => (g.isThumb = g.emoji === 'üëç'))

        return result
    })

    // –ü–æ–ª—É—á–µ–Ω–∏–µ ID –º–æ–µ–π —Ä–µ–∞–∫—Ü–∏–∏
    const myReactionId = computed(() => {
        if (!currentUserId) return null

        // –ï—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏—è –±—ã–ª–∞ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ —É–¥–∞–ª–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
        if (isOptimisticallyCleared.value) return null

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
        const optimistic = optimisticReactions.value.find((r: OptimisticReaction) => pickUserId(r) === currentUserId)
        if (optimistic) {
            const id = Number(optimistic.id)
            return Number.isFinite(id) ? id : null
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return extractMyReactionFromServer(message, currentUserId)
    })

    const hasMyReaction = computed(() => myReactionId.value !== null)

    // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –º–µ–Ω—é
    const menuReactions = computed<IReactionType[]>(() => {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–∏–ø–æ–≤ —Ä–µ–∞–∫—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        if (!reactionTypes.length) {
            return [
                { id: 1, name: 'Like', icon: 'üëç' },
                { id: 2, name: 'Love', icon: '‚ù§Ô∏è' },
                { id: 3, name: 'Laugh', icon: 'üòÇ' },
                { id: 4, name: 'Wow', icon: 'üòÆ' },
                { id: 5, name: 'Sad', icon: 'üò¢' },
                { id: 6, name: 'Angry', icon: 'üò†' },
            ] as IReactionType[]
        }

        const like = findThumbsUpReaction()
        if (like && !reactionTypes.find((r) => r.id === like.id)) {
            return [like, ...reactionTypes]
        }
        if (!like) {
            return [{ id: -1, name: 'Like', icon: 'üëç' } as IReactionType, ...reactionTypes]
        }
        return reactionTypes
    })

    // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏—è–º–∏
    const addOptimisticReaction = (
        id: string | number,
        name: string,
        icon: string | null,
        user: any,
    ) => {
        const key = String(id)
        const userId = String(user?.user ?? user?.id ?? user?.user_id ?? 'me')
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ—Å—Ç—å)
        optimisticReactions.value = optimisticReactions.value.filter(
            (r: OptimisticReaction) => pickUserId(r) !== userId,
        )
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é
        optimisticReactions.value.push({ id: key, name, icon, user })
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π —Ä–µ–∞–∫—Ü–∏–∏
        isOptimisticallyCleared.value = false
        
    }

    const clearOptimisticForMe = () => {
        if (!currentUserId) return
        const beforeCount = optimisticReactions.value.length
        optimisticReactions.value = optimisticReactions.value.filter(
            (r: OptimisticReaction) => pickUserId(r) !== currentUserId,
        )
        const afterCount = optimisticReactions.value.length
        isOptimisticallyCleared.value = true
        
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const hasServerReaction = extractMyReactionFromServer(message, currentUserId) !== null
    }

    const findThumbsUpReaction = (): IReactionType | null => {
        const byIcon = reactionTypes.find((r) => {
            const icon = String(r.icon || '').toLowerCase()
            return icon.includes('üëç') || icon.includes('thumb')
        })
        if (byIcon) return byIcon

        const byName = reactionTypes.find((r) => {
            const name = String(r.name || '').toLowerCase()
            return /like|–ª–∞–π–∫|thumb|–Ω—Ä–∞–≤|–ø–∞–ª–µ—Ü/.test(name)
        })
        return byName || null
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const syncWithServerData = () => {
        // –û—á–∏—â–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—É—á–∏–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        if (optimisticReactions.value.length > 0) {
            optimisticReactions.value = []
            isOptimisticallyCleared.value = false
        }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    watch(
        () => [message?.reactions || message?.message_reactions, message?.reaction_updated_at],
        ([newReactions], [oldReactions]) => {
            // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∏ —É –Ω–∞—Å –µ—Å—Ç—å –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
            if (newReactions !== oldReactions && optimisticReactions.value.length > 0) {
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                setTimeout(() => {
                    if (optimisticReactions.value.length > 0) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä–µ–∞–∫—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        const hasMyReactionInServer = currentUserId && extractMyReactionFromServer(message, currentUserId) !== null
                        
                        if (hasMyReactionInServer) {
                            optimisticReactions.value = []
                            isOptimisticallyCleared.value = false
                        } else {
                        }
                    }
                }, 500)
            }
        },
        { deep: true, immediate: false }
    )

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const forceUpdate = () => {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º computed —Å–≤–æ–π—Å—Ç–≤–∞, –∏–∑–º–µ–Ω—è—è –∫–ª—é—á
    }

    return {
        groupedReactions,
        myReactionId,
        hasMyReaction,
        menuReactions,
        optimisticReactions: optimisticReactions.value,
        hasQuickLike,
        forceShowLike,
        addOptimisticReaction,
        clearOptimisticForMe,
        syncWithServerData,
        findThumbsUpReaction,
        forceUpdate,
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

function processArrayFormat(array: any[], addUserToGroup: Function, chatMembers?: Array<{ user: string | IUser; user_name?: string; user_uuid?: string; is_admin?: boolean; joined_at?: string }>, reactionTypes?: IReactionType[]) {
    for (const item of array) {
        const id = String(
            item?.type_id ??
                item?.reaction_id ??
                item?.reaction_type_id ??
                item?.id ??
                item?.type ??
                item?.reaction?.id ??
                '',
        )
        let name =
            item?.type_name ?? item?.reaction_name ?? item?.name ?? item?.reaction?.name ?? ''
        let icon =
            item?.type_icon ?? item?.reaction_icon ?? item?.icon ?? item?.reaction?.icon ?? null

        // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–∏–ø—ã —Ä–µ–∞–∫—Ü–∏–π –∏ ID, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if (reactionTypes && id) {
            const reactionType = reactionTypes.find(rt => String(rt.id) === String(id))
            if (reactionType) {
                name = name || reactionType.name
                icon = icon || reactionType.icon
            }
        }

        const usersSources = [
            item?.users,
            item?.reactors,
            item?.members,
            item?.users_preview,
            item?.list,
            item?.user_list,
        ]
            .filter(Array.isArray)
            .flat()

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ {user_id: "...", reaction_type_id: 2, user_name: "...", avatar: null}
        if (item?.user_id) {
            const userId = item.user_id
            const userName = item.user_name
            const userAvatar = item.avatar
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
            const alreadyExists = usersSources.some(u => 
                String(u?.user || u?.id || u?.user_id || '') === String(userId)
            )
            
            if (!alreadyExists) {
                // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö —á–∞—Ç–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                const chatMember = chatMembers?.find(m => {
                    if (typeof m.user === 'string') {
                        return m.user === userId || m.user_uuid === userId
                    } else {
                        return m.user?.id === userId || m.user_uuid === userId
                    }
                })
                
                // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–∏
                const userObj = {
                    id: userId,
                    user: userId,
                    user_id: userId,
                    name: userName || chatMember?.user_name,
                    user_name: userName || chatMember?.user_name,
                    full_name: userName || chatMember?.user_name,
                    avatar: userAvatar
                }
                usersSources.push(userObj)
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å –ø—Ä—è–º—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º user –≤ –∫–æ—Ä–Ω–µ –æ–±—ä–µ–∫—Ç–∞
        if (item?.user) {
            const userId = item.user
            const userName = item.user_name
            const userAvatar = item.avatar
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
            const alreadyExists = usersSources.some(u => 
                String(u?.user || u?.id || u?.user_id || '') === String(userId)
            )
            
            if (!alreadyExists) {
                const chatMember = chatMembers?.find(m => {
                    if (typeof m.user === 'string') {
                        return m.user === userId || m.user_uuid === userId
                    } else {
                        return m.user?.id === userId || m.user_uuid === userId
                    }
                })
                
                const userObj = {
                    id: userId,
                    user: userId,
                    user_id: userId,
                    name: userName || chatMember?.user_name,
                    user_name: userName || chatMember?.user_name,
                    full_name: userName || chatMember?.user_name,
                    avatar: userAvatar
                }
                usersSources.push(userObj)
            }
        }

        for (const user of usersSources.filter(Boolean)) {
            addUserToGroup(id, name, icon, user)
        }
    }
}

function processObjectFormat(obj: any, addUserToGroup: Function, chatMembers?: Array<{ user: string | IUser; user_name?: string; user_uuid?: string; is_admin?: boolean; joined_at?: string }>, reactionTypes?: IReactionType[]) {
    for (const [key, val] of Object.entries(obj)) {
        const v: any = val
        if (Array.isArray(v)) {
            processArrayFormat(v, addUserToGroup, chatMembers, reactionTypes)
        } else {
            const users =
                [v?.users, v?.users_preview, v?.reactors, v?.members].find(Array.isArray) || []

            for (const user of users) {
                addUserToGroup(String(v?.id ?? key), v?.name ?? key, v?.icon ?? null, user)
            }
        }
    }
}

function enforceExclusiveReactions(groups: ReactionGroup[], currentUserId: string) {
    // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É —Å –º–æ–µ–π —Ä–µ–∞–∫—Ü–∏–µ–π
    let myGroupKey: string | null = null
    for (let i = groups.length - 1; i >= 0; i--) {
        if (groups[i].users.some((u) => String(u.id) === currentUserId)) {
            myGroupKey = groups[i].key
            break
        }
    }

    // –£–¥–∞–ª—è–µ–º –º–µ–Ω—è –∏–∑ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø
    if (myGroupKey) {
        groups.forEach((g) => {
            if (g.key !== myGroupKey) {
                g.users = g.users.filter((u) => String(u.id) !== currentUserId)
            }
        })
    }

    // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –≥—Ä—É–ø–ø—ã
    for (let i = groups.length - 1; i >= 0; i--) {
        if (groups[i].users.length === 0) {
            groups.splice(i, 1)
        }
    }
}

function extractMyReactionFromServer(message: any, currentUserId: string): number | null {
    const raw = message?.reactions || message?.message_reactions || []

    const scanArray = (arr: any[]): number | null => {
        for (const item of arr) {
            const users = [
                item?.users,
                item?.reactors,
                item?.members,
                item?.users_preview,
                item?.user,
            ]
                .filter(Boolean)
                .flat()

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const hasMyUser = users.some(
                (u: any) => String(u?.user ?? u?.id ?? u?.user_id ?? '') === currentUserId,
            )

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç {user_id: "...", reaction_type_id: 2}
            const isMyDirectReaction = item?.user_id && String(item.user_id) === currentUserId
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç {user: "...", reaction_type: 2}
            const isMyUserReaction = item?.user && String(item.user) === currentUserId

            if (hasMyUser || isMyDirectReaction || isMyUserReaction) {
                const id = Number(
                    item?.type_id ??
                        item?.reaction_id ??
                        item?.reaction_type_id ??
                        item?.reaction_type ??
                        item?.id ??
                        item?.type ??
                        item?.reaction?.id ??
                        '',
                )
                return Number.isFinite(id) ? id : null
            }
        }
        return null
    }

    if (Array.isArray(raw)) return scanArray(raw)
    if (raw && typeof raw === 'object') return scanArray(Object.values(raw))
    return null
}

export function getReactionEmoji(r: IReactionType): string {
    if (r.icon && r.icon.length <= 3) return r.icon

    const icon = String(r.icon || '').toLowerCase()
    const name = (r.name || '').toLowerCase()

    if (icon.includes('thumb')) return 'üëç'
    if (name.includes('—Å—á–∞—Å—Ç')) return 'üòä'
    if (name.includes('–ª—é–±')) return 'üòç'
    if (name.includes('—É–¥–∏–≤')) return 'üòÆ'
    if (name.includes('–≥—Ä—É—Å—Ç') || name.includes('–ø–µ—á–∞–ª—å')) return 'üò¢'
    if (name.includes('—Å–º–µ—à') || name.includes('—Å–º–µ—Ö')) return 'üòÜ'

    return 'üëç'
}

export function isThumbReaction(r: IReactionType): boolean {
    const icon = String(r.icon || '').toLowerCase()
    const name = String(r.name || '').toLowerCase()
    return icon.includes('thumb') || icon.includes('üëç') || /like|–ª–∞–π–∫|–Ω—Ä–∞–≤/.test(name)
}
