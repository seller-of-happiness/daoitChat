/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–µ—Ä–≤–∏—Å –∑–≤—É–∫–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∫–∞–∫ –≤ Bitrix24/Telegram)
 *
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
 * - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Service Worker
 * - Web Audio API –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
 * - HTML5 Audio –∫–∞–∫ fallback
 * - –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º AudioContext
 * - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ localStorage
 * - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –∞—É–¥–∏–æ
 */

interface SoundConfig {
    volume: number // 0.0 - 1.0
    enabled: boolean
    wasActivated: boolean // –ë—ã–ª –ª–∏ –∑–≤—É–∫ –∫–æ–≥–¥–∞-–ª–∏–±–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
    useSystemNotifications: boolean // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
}

class SoundService {
    private sounds: Map<string, HTMLAudioElement> = new Map()
    private config: SoundConfig = {
        volume: 0.7,
        enabled: true,
        wasActivated: false,
        useSystemNotifications: false,
    }
    private isAudioUnlocked: boolean = false
    private pendingSounds: string[] = []
    private audioContext: AudioContext | null = null
    private audioBuffer: AudioBuffer | null = null
    private isActivating: boolean = false
    private serviceWorkerRegistration: ServiceWorkerRegistration | null = null

    constructor() {
        this.loadConfig()
        this.preloadSounds()
        this.initWebAudio()
        this.setupServiceWorker()
        this.setupAutoUnlock()

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞–Ω–µ–µ –¥–∞–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚Äì –≤–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (typeof window !== 'undefined' && 'Notification' in window) {
            if (Notification.permission === 'granted' && !this.config.useSystemNotifications) {
                this.config.useSystemNotifications = true
                this.saveConfig()
            }
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ localStorage
     */
    private loadConfig(): void {
        try {
            const saved = localStorage.getItem('chat-sound-config')
            if (saved) {
                this.config = { ...this.config, ...JSON.parse(saved) }
            }
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞:', error)
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ localStorage
     */
    private saveConfig(): void {
        try {
            localStorage.setItem('chat-sound-config', JSON.stringify(this.config))
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞:', error)
        }
    }

    /**
     * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∑–≤—É–∫–æ–≤—ã–µ —Ñ–∞–π–ª—ã
     */
    private preloadSounds(): void {
        const soundFiles = {
            'new-message': '/sounds/new-message.wav',
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∑–≤—É–∫–∏ –≤ –±—É–¥—É—â–µ–º
            // 'notification': '/sounds/notification.wav',
            // 'error': '/sounds/error.wav'
        }

        Object.entries(soundFiles).forEach(([key, path]) => {
            try {
                const audio = new Audio(path)
                audio.preload = 'auto'
                audio.volume = this.config.volume

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
                audio.addEventListener('error', (e) => {
                    console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–≤—É–∫–æ–≤–æ–π —Ñ–∞–π–ª: ${path}`, e)
                })

                this.sounds.set(key, audio)
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Audio –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è ${key}:`, error)
            }
        })
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Service Worker –¥–ª—è –∑–≤—É–∫–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∫–∞–∫ –≤ –ë–∏—Ç—Ä–∏–∫—Å24/Telegram)
     */
    private async setupServiceWorker(): Promise<void> {
        if (typeof window === 'undefined' || !('serviceWorker' in navigator)) {
            return
        }

        try {
            const registration = await navigator.serviceWorker.register('/sw.js', {
                scope: '/',
            })

            this.serviceWorkerRegistration = registration

            // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Service Worker
            navigator.serviceWorker.addEventListener('message', (event) => {
                if (event.data?.type === 'SOUND_PLAYED') {
                    console.log('üîä –ó–≤—É–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω —á–µ—Ä–µ–∑ Service Worker')
                }
            })
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å Service Worker:', error)
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Web Audio API –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
     */
    private async initWebAudio(): Promise<void> {
        try {
            if (typeof window === 'undefined' || !window.AudioContext) {
                return
            }

            this.audioContext = new AudioContext()

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä
            try {
                const response = await fetch('/sounds/new-message.wav')
                const arrayBuffer = await response.arrayBuffer()
                this.audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer)
            } catch (error) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä:', error)
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Web Audio API:', error)
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∞—É–¥–∏–æ
     */
    private setupAutoUnlock(): void {
        const unlockEvents = ['click', 'touchstart', 'keydown', 'mousedown']

        const unlockAudio = async () => {
            if (this.isAudioUnlocked) return

            const success = await this.attemptUnlock()
            if (success) {
                this.isAudioUnlocked = true
                this.playPendingSounds()

                // –£–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                unlockEvents.forEach((event) => {
                    document.removeEventListener(event, unlockAudio)
                })
            }
        }

        if (typeof document !== 'undefined') {
            unlockEvents.forEach((event) => {
                document.addEventListener(event, unlockAudio, { passive: true, once: false })
            })
        }
    }

    /**
     * –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞—É–¥–∏–æ
     */
    private async attemptUnlock(): Promise<boolean> {
        if (this.isAudioUnlocked) {
            return true
        }

        try {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫
            const testAudio = new Audio()
            testAudio.volume = 0.01
            testAudio.muted = true

            // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏
            await testAudio.play()
            testAudio.pause()
            testAudio.currentTime = 0

            // –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å AudioContext
            if (this.audioContext && this.audioContext.state === 'suspended') {
                try {
                    await this.audioContext.resume()
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ AudioContext
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ AudioContext
            if (this.audioContext && this.audioContext.state === 'running') {
                this.isAudioUnlocked = true
                this.config.wasActivated = true
                this.saveConfig()
            }

            return true
        } catch (error) {
            return false
        }
    }

    /**
     * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–≤—É–∫–∏
     */
    private async playPendingSounds(): Promise<void> {
        if (this.pendingSounds.length === 0) return

        for (const soundKey of this.pendingSounds) {
            try {
                await this.playSound(soundKey)
            } catch (error) {
                console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∑–≤—É–∫ ${soundKey}:`, error)
            }
        }

        this.pendingSounds = []
    }

    /**
     * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞—É–¥–∏–æ
     */
    async ensureNotifications(): Promise<boolean> {
        if (typeof window === 'undefined' || !('Notification' in window)) {
            return false
        }

        // –£–∂–µ –µ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        if (Notification.permission === 'granted') {
            if (!this.config.useSystemNotifications) {
                this.config.useSystemNotifications = true
                this.saveConfig()
            }
            return true
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ —è–≤–Ω–æ –∑–∞–ø—Ä–µ—Ç–∏–ª ‚Äî —É–≤–∞–∂–∞—Ç—å –∑–∞–ø—Ä–µ—Ç
        if (Notification.permission === 'denied') {
            return false
        }

        // default ‚Üí –∑–∞–ø—Ä–æ—Å–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        const perm = await Notification.requestPermission()
        if (perm === 'granted') {
            this.config.useSystemNotifications = true
            this.saveConfig()
            return true
        }

        return false
    }

    /**
     * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–≤—É–∫ –ø–æ –∫–ª—é—á—É
     */
    async playSound(soundKey: string): Promise<void> {
        if (!this.config.enabled) {
            return
        }

        // –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ Web Audio API (–Ω–∞–∏–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
        if (this.audioContext && this.audioBuffer) {
            try {
                if (this.audioContext.state === 'suspended') {
                    await this.audioContext.resume()
                }

                if (this.audioContext.state === 'running') {
                    const webAudioOk = await this.playWithWebAudio(false)
                    if (webAudioOk) {
                        this.isAudioUnlocked = true
                        return
                    }
                }
            } catch (e) {
                // Fallback –∫ HTML5 Audio
            }
        }

        // Fallback: HTML5 Audio (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±)
        const audio = this.sounds.get(soundKey)
        if (audio) {
            try {
                audio.currentTime = 0
                audio.volume = this.config.volume
                audio.muted = false

                await audio.play()
                this.isAudioUnlocked = true
                return
            } catch (e) {
                // Fallback –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
            }
        }

        // Fallback: —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã)
        if (this.config.useSystemNotifications && this.config.wasActivated) {
            const swOk = await this.playWithServiceWorker()
            if (swOk) {
                return
            }
        }

        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        if (!this.pendingSounds.includes(soundKey)) {
            this.pendingSounds.push(soundKey)
        }
    }

    /**
     * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Web Audio API
     */
    private async playWithWebAudio(silent: boolean = false): Promise<boolean> {
        if (!this.audioContext || !this.audioBuffer) {
            return false
        }

        try {
            // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if (this.audioContext.state === 'suspended') {
                await this.audioContext.resume()
            }

            // –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–≤—É–∫–∞
            const source = this.audioContext.createBufferSource()
            const gainNode = this.audioContext.createGain()

            source.buffer = this.audioBuffer
            gainNode.gain.value = silent ? 0.01 : this.config.volume

            // –°–æ–µ–¥–∏–Ω—è–µ–º: –∏—Å—Ç–æ—á–Ω–∏–∫ -> —Ä–µ–≥—É–ª—è—Ç–æ—Ä –≥—Ä–æ–º–∫–æ—Å—Ç–∏ -> –≤—ã—Ö–æ–¥
            source.connect(gainNode)
            gainNode.connect(this.audioContext.destination)

            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
            source.start(0)

            return true
        } catch (error) {
            return false
        }
    }

    /**
     * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Service Worker (–∫–∞–∫ –≤ –ë–∏—Ç—Ä–∏–∫—Å24/Telegram)
     */
    private async playWithServiceWorker(): Promise<boolean> {
        if (typeof Notification === 'undefined' || Notification.permission !== 'granted') {
            return false
        }

        // –ü–æ–∫–∞–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ –∑–≤—É–∫–æ–º
        try {
            if (this.serviceWorkerRegistration) {
                await this.serviceWorkerRegistration.showNotification('üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', {
                    icon: '/favicon.ico',
                    badge: '/favicon.ico',
                    silent: false,
                    tag: 'chat-message',
                    requireInteraction: false,
                })
                return true
            }
        } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        }

        // Fallback —á–µ—Ä–µ–∑ postMessage
        try {
            if (navigator.serviceWorker.controller) {
                navigator.serviceWorker.controller.postMessage({
                    type: 'PLAY_SOUND',
                    sound: 'new-message',
                })
                return true
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        }

        return false
    }

    /**
     * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–≤—É–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    async playNewMessageSound(): Promise<void> {
        await this.playSound('new-message')
    }

    /**
     * –í–∫–ª—é—á–∞–µ—Ç/–æ—Ç–∫–ª—é—á–∞–µ—Ç –∑–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    setEnabled(enabled: boolean): void {
        this.config.enabled = enabled
        this.saveConfig()
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥—Ä–æ–º–∫–æ—Å—Ç—å –∑–≤—É–∫–æ–≤
     */
    setVolume(volume: number): void {
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –æ—Ç 0 –¥–æ 1
        this.config.volume = Math.max(0, Math.min(1, volume))
        this.saveConfig()

        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–≤—É–∫–æ–≤
        this.sounds.forEach((audio) => {
            audio.volume = this.config.volume
        })
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    getConfig(): SoundConfig {
        return { ...this.config }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –∑–≤—É–∫–∏
     */
    isEnabled(): boolean {
        return this.config.enabled
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –∑–≤—É–∫ –∫–æ–≥–¥–∞-–ª–∏–±–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    wasEverActivated(): boolean {
        return this.config.wasActivated
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –∑–≤—É–∫ (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
     */
    get audioUnlocked(): boolean {
        return this.isAudioUnlocked
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∑–≤—É–∫–∞
     */
    async forceActivateImmediately(): Promise<boolean> {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        if (this.isActivating) {
            return false
        }

        if (this.isAudioUnlocked) {
            return true
        }

        this.isActivating = true

        try {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º AudioContext
            if (this.audioContext && this.audioContext.state === 'suspended') {
                await this.audioContext.resume()
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if (this.audioContext && this.audioContext.state === 'running') {
                this.isAudioUnlocked = true
                this.config.wasActivated = true
                this.saveConfig()

                // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–≤—É–∫ (—Ç–∏—Ö–æ, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å)
                try {
                    await this.playWithWebAudio(true) // –¢–∏—Ö–∏–π —Ç–µ—Å—Ç
                } catch (error) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–≤—É–∫–∞
                }

                return true
            } else {
                return false
            }
        } catch (error) {
            return false
        } finally {
            this.isActivating = false
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const soundService = new SoundService()

// –î–µ–ª–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if (typeof window !== 'undefined') {
    ;(window as any).soundService = soundService
    ;(window as any).testSound = () => soundService.playNewMessageSound()
}
